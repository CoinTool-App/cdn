(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-59ceae54"],{27:function(n,e){},28:function(n,e){},29:function(n,e){},30:function(n,e){},31:function(n,e){},32:function(n,e){},"46a4":function(n,e,t){"use strict";t.r(e);var r=function(){var n=this,e=n._self._c;return e("div",{staticClass:"container"},[e("el-button",{on:{click:n.createBulkSender}},[n._v("创建一转多")])],1)},a=[],o=t("c7eb"),i=t("1da1"),s=t("5530"),d=(t("ac1f"),t("5319"),t("d9e2"),t("d3b7"),t("25f0"),t("c039"),t("2f62")),u=(t("ebe1"),{zh:{rpcServer:{}},en:{rpcServer:{}}}),c=(t("3e44"),t("64b9"),t("fa13"),t("0774"),t("df00"),t("c030")),l=(t("ce84"),t("0abea"),t("016a"),t("59da"),t("408b"),t("901e"),t("ccaf9"),t("0535"),t("6ccc"),t("a969"),t("5ba3"),t("5a50"),t("a7f0")),p="\n/*\n* By CoinTool.app\n* Token Locker\n*/\npragma solidity >=0.6.0 <0.8.0;\n\ncontract EternalStorage {\n\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from ReentrancyGuard will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single nonReentrant guard, functions marked as\n * nonReentrant may not call one another. This can be worked around by making\n * those functions private, and then adding external nonReentrant entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a nonReentrant function from another nonReentrant\n     * function is not supported. It is possible to prevent this from happening\n     * by making the nonReentrant function external, and make it call a\n     * private function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * SafeMath restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's +  operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's -  operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's *  operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's /  operator. Note: this function uses a\n     * revert opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's %  operator. This function uses a revert\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's -  operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's /  operator. Note: this function uses a\n     * revert opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's %  operator. This function uses a revert\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * onlyOwner, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * onlyOwner functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (newOwner).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\n        if (!isERC20) {\n            to.transfer(value);\n        } else {\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n        }\n    }\n}\n\n\n\ninterface IERCBurn {\n    function burn(uint256 _amount) external;\n    function approve(address spender, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IUniFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address);\n}\n\ninterface IMigrator {\n    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\n}\n\ncontract TokenLocker is Ownable, ReentrancyGuard,EternalStorage {\n  using SafeMath for uint256;\n\n  \n\n  struct TokenLock {\n    uint256 lockDate; // the date the token was locked\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\n    uint256 initialAmount; // the initial lock amount\n    uint256 unlockDate; // the date the token can be withdrawn\n    address owner;\n  }\n\n  mapping(address => address[]) public lockedTokens;\n  mapping(address => address[]) public lockedUser;\n  mapping(address =>  mapping (address => TokenLock)) public tokenLocks; //map univ2 pair to all its locks\n  \n  struct FeeStruct {\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\n  }\n    \n  FeeStruct public gFees;\n  \n  address payable devaddr;\n  address payable lpaddr;\n\n  \n  IMigrator migrator;\n\n  event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\n  event onWithdraw(address lpToken, uint256 amount);\n\n  constructor() public {\n    devaddr = msg.sender;\n    lpaddr = address(msg.sender);\n    gFees.ethFee = /*--PRICE--*/ ether;\n    gFees.liquidityFee = 10; // 1%\n  }\n  \n  function setDev(address payable _devaddr) public onlyOwner {\n    devaddr = _devaddr;\n  }\n  \n  /**\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\n   */\n  function setMigrator(IMigrator _migrator) public onlyOwner {\n    migrator = _migrator;\n  }\n  \n\n\n  \n  function setFees(uint256 _ethFee, uint256 _liquidityFee) public onlyOwner {\n    gFees.ethFee = _ethFee;\n    gFees.liquidityFee = _liquidityFee;\n  }\n  \n\n\n  /**\n   * @notice Creates a new lock\n   * @param _lpToken the univ2 token address\n   * @param _amount amount of LP tokens to lock\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\n   */\n  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _withdrawer) external payable nonReentrant {\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n    require(_amount > 0, 'INSUFFICIENT');\n\n\n    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\n    \n    \n    uint256 ethFee = gFees.ethFee;\n    require(msg.value == ethFee, 'FEE NOT MET');\n    uint256 devFee = ethFee;\n    devaddr.transfer(devFee);\n    \n    // percent fee\n    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\n    TransferHelper.safeTransfer(_lpToken, lpaddr, liquidityFee);\n    uint256 amountLocked = _amount.sub(liquidityFee);\n    \n\tif(!boolStorage[keccak256(abi.encodePacked(_lpToken,_withdrawer))]){\n        TokenLock memory token_lock;\n        token_lock.lockDate = block.timestamp;\n        token_lock.amount = amountLocked;\n        token_lock.initialAmount = amountLocked;\n        token_lock.unlockDate = _unlock_date;\n        token_lock.owner = _withdrawer;\n        // record the lock for the univ2pair\n        tokenLocks[_lpToken][_withdrawer] = token_lock;\n        boolStorage[keccak256(abi.encodePacked(_lpToken,_withdrawer))] = true;\n        \n        if(!boolStorage[keccak256(abi.encodePacked(_withdrawer,_lpToken))]){\n          lockedTokens[_lpToken].push(_withdrawer);\n          lockedUser[_withdrawer].push(_lpToken);\n          boolStorage[keccak256(abi.encodePacked(_withdrawer,_lpToken))] = true;\n        }\n        emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\n\t}else{\n\t    require(msg.sender == _withdrawer, '_withdrawer no sender');\n\t    TokenLock storage tokenLock = tokenLocks[_lpToken][_withdrawer];\n\t\ttokenLock.amount= tokenLock.amount.add(amountLocked);\n\t\ttokenLock.initialAmount= tokenLock.initialAmount.add(amountLocked);\n\t\ttokenLock.lockDate = block.timestamp;\n\t\tif(_unlock_date > tokenLock.unlockDate){\n\t\t    tokenLock.unlockDate = _unlock_date;\n\t\t}\n\t\temit onDeposit(_lpToken, msg.sender, tokenLock.amount, tokenLock.lockDate, tokenLock.unlockDate);\n\t}\n\n    \n  }\n  \n\n  function relock (address _lpToken,  uint256 _unlock_date) external nonReentrant {\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n    TokenLock storage userLock = tokenLocks[_lpToken][msg.sender];\n    require(userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\n\n    userLock.unlockDate = _unlock_date;\n\n  }\n\n\n  /**\n   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n   */\n  function withdraw (address _lpToken, uint256 _amount) external nonReentrant {\n    require(_amount > 0, 'ZERO WITHDRAWL');\n    TokenLock storage userLock = tokenLocks[_lpToken][msg.sender];\n    require(userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n    require(userLock.unlockDate < block.timestamp, 'NOT YET');\n    userLock.amount = userLock.amount.sub(_amount);\n\n    // clean user storage\n    if (userLock.amount == 0) {\n\t\tboolStorage[keccak256(abi.encodePacked(_lpToken,msg.sender))] = false;\n    }\n    \n    TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\n    emit onWithdraw(_lpToken, _amount);\n  }\n  \n\n\n  function getLockForToken (address _lpToken) external view \n  returns (address[] memory) {\n    address[] memory addr_list = lockedTokens[_lpToken];\n    return addr_list;\n  }\n  \n  function getLockForUser (address _user) external view \n  returns (address[] memory) {\n    address[] memory addr_list = lockedUser[_user];\n    return addr_list;\n  }\n  \n  function getUserLockForToken (address _user, address _lpToken) external view \n  returns (uint256, uint256, uint256, uint256, address) {\n    TokenLock storage tokenLock = tokenLocks[_lpToken][_user];\n    return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.owner);\n  }\n  \n\n}",h='\npragma solidity 0.4.23;\n\ncontract EternalStorage {\n\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n\n// File: contracts/UpgradeabilityOwnerStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title UpgradeabilityOwnerStorage\n * @dev This contract keeps track of the upgradeability owner\n */\ncontract UpgradeabilityOwnerStorage {\n  // Owner of the contract\n    address private _upgradeabilityOwner;\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function upgradeabilityOwner() public view returns (address) {\n        return _upgradeabilityOwner;\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n        _upgradeabilityOwner = newUpgradeabilityOwner;\n    }\n\n}\n\n// File: contracts/UpgradeabilityStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title UpgradeabilityStorage\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\n */\ncontract UpgradeabilityStorage {\n  // Version name of the current implementation\n    string internal _version;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the version name of the current implementation\n    * @return string representing the name of the current version\n    */\n    function version() public view returns (string) {\n        return _version;\n    }\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\n// File: contracts/OwnedUpgradeabilityStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n\n/**\n * @title OwnedUpgradeabilityStorage\n * @dev This is the storage necessary to perform upgradeable contracts.\n * This means, required state variables for upgradeability purpose and eternal storage per se.\n */\ncontract OwnedUpgradeabilityStorage is UpgradeabilityOwnerStorage, UpgradeabilityStorage, EternalStorage {}\n\n// File: contracts/SafeMath.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/multisender/Ownable.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n/**\n * @title Ownable\n * @dev This contract has an owner address providing basic authorization control\n */\ncontract Ownable is EternalStorage {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner());\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function owner() public view returns (address) {\n        return addressStorage[keccak256("owner")];\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner the address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        setOwner(newOwner);\n    }\n\n    /**\n    * @dev Sets a new owner address\n    */\n    function setOwner(address newOwner) internal {\n        emit OwnershipTransferred(owner(), newOwner);\n        addressStorage[keccak256("owner")] = newOwner;\n    }\n}\n\n// File: contracts/multisender/Claimable.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is EternalStorage, Ownable {\n    function pendingOwner() public view returns (address) {\n        return addressStorage[keccak256("pendingOwner")];\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner());\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        addressStorage[keccak256("pendingOwner")] = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner(), pendingOwner());\n        addressStorage[keccak256("owner")] = addressStorage[keccak256("pendingOwner")];\n        addressStorage[keccak256("pendingOwner")] = address(0);\n    }\n}\n\n// File: contracts/multisender/UpgradebleStormSender.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract UpgradebleStormSender is OwnedUpgradeabilityStorage, Claimable {\n    using SafeMath for uint256;\n\n    event Multisended(uint256 total, address tokenAddress);\n    event ClaimedTokens(address token, address owner, uint256 balance);\n\t\n\n\n    function() public payable {\n\n    }\n\n    constructor() public {\n        setOwner(address(msg.sender));\n        setArrayLimit(200);\n        setFee(/*--PRICE--*/ ether);//手续费\n\t\tsetVIPFee(10000000000 ether);//VIP手续费\n        boolStorage[keccak256("rs_multisender_initialized")] = true;\n    }\n\n\n\n    function arrayLimit() public view returns(uint256) {\n        return uintStorage[keccak256("arrayLimit")];\n    }\n\n    function setArrayLimit(uint256 _newLimit) public onlyOwner {\n        require(_newLimit != 0);\n        uintStorage[keccak256("arrayLimit")] = _newLimit;\n    }\n\n    function fee() public view returns(uint256) {\n        return uintStorage[keccak256("fee")];\n    }\n\t\n    function vipfee() public view returns(uint256) {\n        return uintStorage[keccak256("vipfee")];\n    }\n\n    function currentFee(address _customer) public view returns(uint256) {\n\t\tbool vip = isVIP(_customer);\n\t\tif(vip){\n\t\t\treturn 0;\n\t\t}else{\n\t\t\treturn fee();\n\t\t}\n    }\n\t\n    function setFee(uint256 _newStep) public onlyOwner {\n        require(_newStep != 0);\n        uintStorage[keccak256("fee")] = _newStep;\n    }\n\t\n    function setVIPFee(uint256 _newStep) public onlyOwner {\n        require(_newStep != 0);\n        uintStorage[keccak256("vipfee")] = _newStep;\n    }\n\n    /*\n        * Check isVIP\n    */\n    function isVIP(address _addr) public view returns(bool) {\n        return boolStorage[keccak256(_addr)];\n    }\n\t\n    function multisendToken(address token, address[] _contributors, uint256[] _balances) public payable {\n        if (token == 0x000000000000000000000000000000000000bEEF){\n\t\t\t\t\t \n            multisendEther(_contributors, _balances);\n        } else {\n            uint256 total = 0;\n            ERC20 erc20token = ERC20(token);\n            uint8 i = 0;\n            for (i; i < _contributors.length; i++) {\n                erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\n                total += _balances[i];\n            }\n           emit Multisended(total, token);\n        }\n    }\n\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\n        uint256 total = msg.value;\n        uint256 i = 0;\n        for (i; i < _contributors.length; i++) {\n            require(total >= _balances[i]);\n            total = total.sub(_balances[i]);\n            _contributors[i].transfer(_balances[i]);\n        }\n        emit Multisended(msg.value, 0x000000000000000000000000000000000000bEEF);\n    }\n\t\n\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner().transfer(address(this).balance);\n            return;\n        }\n        ERC20 erc20token = ERC20(_token);\n        uint256 balance = erc20token.balanceOf(this);\n        erc20token.transfer(owner(), balance);\n        emit ClaimedTokens(_token, owner(), balance);\n    }\n   \n\n}',f='\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * onlyOwner, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * onlyOwner functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (newOwner).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from ReentrancyGuard will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single nonReentrant guard, functions marked as\n * nonReentrant may not call one another. This can be worked around by making\n * those functions private, and then adding external nonReentrant entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\'s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\'s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\'s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a nonReentrant function from another nonReentrant\n     * function is not supported. It is possible to prevent this from happening\n     * by making the nonReentrant function external, and make it call a\n     * private function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\n\n\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\'s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\'s arithmetic operations.\n *\n * NOTE: SafeMath is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\n            // benefit is lost if \'b\' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\'s + operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\'s - operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\'s * operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\'s / operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\'s % operator. This function uses a revert\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\'s - operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\'s / operator. Note: this function uses a\n     * revert opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\'s % operator. This function uses a revert\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by account.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves amount tokens from the caller\'s account to recipient.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that spender will be\n     * allowed to spend on behalf of owner through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets amount as the allowance of spender over the caller\'s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\'s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves amount tokens from sender to recipient using the\n     * allowance mechanism. amount is then deducted from the caller\'s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when value tokens are moved from one account (from) to\n     * another (to).\n     *\n     * Note that value may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a spender for an owner is set by\n     * a call to {approve}. value is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * interfaceId. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when value tokens of token type id are transferred from from to to by operator.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where operator, from and to are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when account grants or revokes permission to operator to transfer their tokens, according to\n     * approved.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type id changes to value, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for id, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that value will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type id owned by account.\n     *\n     * Requirements:\n     *\n     * - account cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - accounts and ids must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to operator to transfer the caller\'s tokens, according to approved,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - operator cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if operator is approved to transfer account\'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers amount tokens of token type id from from to to.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - to cannot be the zero address.\n     * - If the caller is not from, it must be have been approved to spend from\'s tokens via {setApprovalForAll}.\n     * - from must have a balance of tokens of type id of at least amount.\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - ids and amounts must have the same length.\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when tokenId token is transferred from from to to.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when owner enables approved to manage the tokenId token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when owner enables or disables (approved) operator to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in owner\'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the tokenId token.\n     *\n     * Requirements:\n     *\n     * - tokenId must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers tokenId token from from to to, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - from cannot be the zero address.\n     * - to cannot be the zero address.\n     * - tokenId token must exist and be owned by from.\n     * - If the caller is not from, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers tokenId token from from to to.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - from cannot be the zero address.\n     * - to cannot be the zero address.\n     * - tokenId token must be owned by from.\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to to to transfer tokenId token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - tokenId must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for tokenId token.\n     *\n     * Requirements:\n     *\n     * - tokenId must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove operator as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The operator cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the operator is allowed to manage all of the assets of owner.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers tokenId token from from to to.\n     *\n     * Requirements:\n     *\n     * - from cannot be the zero address.\n     * - to cannot be the zero address.\n     * - tokenId token must exist and be owned by from.\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by owner at a given index of its token list.\n     * Use along with {balanceOf} to enumerate all of owner\'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given index of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * \n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a safeTransferFrom after the balance has been updated.\n        To accept the transfer, this must return\n        bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)")) if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a safeBatchTransferFrom after the balances have\n        been updated. To accept the transfer(s), this must return\n        bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)")) if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n\n// File: a.sol\n\n\npragma solidity ^0.8.7;\n\n\n\n\ncontract CointoolMultisender is ERC1155Holder, ReentrancyGuard, Ownable {\n\n  using SafeMath for uint256;\n\n  address payable public feeReceiver;\n  uint256 public ethFee;\n  uint256 public array_limit;\n\n\n  bytes emptyData = bytes("");\n\n\n  constructor()  {\n    ethFee = /*--PRICE--*/ ether;\n    feeReceiver =payable(msg.sender);\n    array_limit = 200;\n  }\n\n\n    function arrayLimit() public view returns(uint256) {\n        return array_limit;\n    }\n\n    function currentFee(address _customer) public view returns(uint256) {\n        if(_customer == address(0x0)){\n            return 0;\n        }\n        return  ethFee;\n    }\n\n\n  // Internal function to send ERC721 or ERC20 tokens\n  // Using transferFrom means we don\'t implement ERC721 Receiver\n  function _send721Or20(address tokenAddress, address from, address to, uint256 amountOrId) internal {\n    IERC721(tokenAddress).transferFrom(from, to, amountOrId);\n  }\n\n\n\n  // Direct senders\n\n  // Normal multisend: sends a batch of ERC721 or ERC20 to a list of addresses\n  function multisendToken(\n    address tokenAddress,\n    address[] calldata userAddresses,\n    uint256[] calldata amountsOrIds\n   ) external payable nonReentrant {\n    require((userAddresses.length == amountsOrIds.length), "diff lengths");\n    for (uint256 i = 0; i < userAddresses.length; i++) {\n      _send721Or20(tokenAddress, msg.sender, userAddresses[i], amountsOrIds[i]);\n    }\n  }\n\n// ERC721 targeted multisend: sends a batch of ERC721 or ERC20s to a list of ERC721 ID holders\n  function send721Or20To721Ids(\n    address[] calldata erc721Addresses,\n    uint256[] calldata receiverIds,\n    uint256[] calldata amountsOrIds,\n    address tokenAddress) external payable nonReentrant {\n    require((erc721Addresses.length == receiverIds.length), "diff lengths");\n    require((erc721Addresses.length == amountsOrIds.length), "diff lengths");\n    for (uint256 i = 0; i < receiverIds.length; i++) {\n      IERC721Enumerable erc721 = IERC721Enumerable(erc721Addresses[i]);\n      _send721Or20(tokenAddress, msg.sender, erc721.ownerOf(receiverIds[i]), amountsOrIds[i]);\n    }\n  }\n\n  // Send ERC-1155 to a batch of addresses\n  function send1155ToAddresses(\n    address[] calldata userAddresses,\n    uint256[] calldata tokenIds,\n    uint256[] calldata amounts,\n    address tokenAddress) external payable nonReentrant {\n    require((userAddresses.length == amounts.length), "diff lengths");\n    require((userAddresses.length == tokenIds.length), "diff lengths");\n    for (uint256 i = 0; i < userAddresses.length; i++) {\n      IERC1155(tokenAddress).safeTransferFrom(msg.sender, userAddresses[i], tokenIds[i], amounts[i], emptyData);\n    }\n  }\n\n  // Send ERC-1155 to a list of ERC721 ID holders\n  function send1155To721Ids(\n    address[] calldata erc721Addresses,\n    uint256[] calldata erc721Ids,\n    uint256[] calldata tokenIds,\n    uint256[] calldata amounts,\n    address tokenAddress) external payable nonReentrant {\n    require((erc721Addresses.length == erc721Ids.length), "diff lengths");\n    require((erc721Addresses.length == amounts.length), "diff lengths");\n    require((erc721Addresses.length == tokenIds.length), "diff lengths");\n    for (uint256 i = 0; i < erc721Addresses.length; i++) {\n      IERC1155(tokenAddress).safeTransferFrom(msg.sender, IERC721(erc721Addresses[i]).ownerOf(erc721Ids[i]), tokenIds[i], amounts[i], emptyData);\n    }\n  }\n\n\n\n\n\n  // OWNER FUNCTIONS\n\n  function setFeeReceiver(address payable a) public onlyOwner {\n    feeReceiver = a;\n  }\n\n  function setEthFee(uint256 f) public onlyOwner {\n    ethFee = f;\n  }\n  \n    function claimTokens(address _token) public onlyOwner {\n        if (_token == address(0x0)) {\n             feeReceiver.transfer(address(this).balance);\n            return;\n        }\n        IERC20 erc20token = IERC20(_token);\n        uint256 balance = erc20token.balanceOf(address(this));\n        erc20token.transfer(feeReceiver, balance);\n    }\n   \n  \n  \n\n}',m='pragma solidity ^0.6.12;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\t/**\n     * mul \n     * @dev Safe math multiply function\n     */\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\tuint256 c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\t/**\n   * add\n   * @dev Safe math addition function\n   */\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\'s /  operator. Note: this function uses a\n     * revert opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, "SafeMath: division by zero");\n        return a / b;\n    }\n\n}\n\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n}\n\n\n\n\n\n/**\n * @title Ownable\n * @dev Ownable has an owner address to simplify "user permissions".\n */\ncontract Ownable {\n\taddress public owner;\n\n\t/**\n   * Ownable\n   * @dev Ownable constructor sets the owner of the contract to sender\n   */\n\n\n\t/**\n   * ownerOnly\n   * @dev Throws an error if called by any account other than the owner.\n   */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\t/**\n   * transferOwnership\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\towner = newOwner;\n\t}\n}\n\n/**\n * @title Token\n * @dev API interface for interacting with the WILD Token contract \n */\ninterface Token {\n\tfunction transfer(address _to, uint256 _value) external returns(bool);\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\n\tfunction balanceOf(address _owner) external view returns(uint256);\n\tfunction approve(address spender, uint value) external returns (bool);\n}\n\n\n\ninterface Lock {\n\tfunction lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _withdrawer) external payable;\n}\n\n\n\n\ncontract AddPool is Ownable {\n\tusing SafeMath\n\tfor uint256;\n\tToken token;\n\n\n\tconstructor() public{\n\t    owner = msg.sender;\n\t}\n\t\n\t\n\n    \n    function addSwap(address _tokenAddress,uint256 _tokenAmount,address _lockAddress,uint256 _lockFee,uint256 _unlockDate,address _uniswapV2Router) public payable {\n        Token erc20token = Token(_tokenAddress);\n        erc20token.transferFrom(msg.sender, address(this), _tokenAmount);\n        uint256 _bal = msg.value;\n        uint256 bal = _bal - _lockFee;\n\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\n        address uniswapV2Pair;\n        if (IUniswapV2Factory(uniswapV2Router.factory()).getPair(_tokenAddress, uniswapV2Router.WETH()) == address(0)) {\n               uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n            .createPair(_tokenAddress, uniswapV2Router.WETH());\n        }else{\n              uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(_tokenAddress, uniswapV2Router.WETH());\n        }\n             \n\n\n        erc20token.approve(_uniswapV2Router, _tokenAmount);\n        \n        uniswapV2Router.addLiquidityETH{value: bal}(\n            _tokenAddress,\n            erc20token.balanceOf(address(this)),\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n        \n        \n        Lock _lock = Lock(_lockAddress);\n        Token _pairAddress = Token(uniswapV2Pair);\n        uint256 _tokenbal = _pairAddress.balanceOf(address(this));\n        _pairAddress.approve(_lockAddress,_tokenbal);\n        _lock.lockLPToken{value: _lockFee}(uniswapV2Pair,_tokenbal,_unlockDate,payable(msg.sender));\n    }\n\n\n\n\n\n\n\tfunction claimTokens(uint256 types) public onlyOwner {\n\t\tif (types == 1) {\n\t\t\tpayable(owner).transfer(address(this).balance);\n\t\t} else {\n\t\t\tuint256 balance = token.balanceOf(address(this));\n\t\t\ttoken.transfer(owner, balance);\n\t\t}\n\t}\n\t\n\n\n\n}\n',b='\npragma solidity 0.4.23;\n\ncontract EternalStorage {\n\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n\n// File: contracts/UpgradeabilityOwnerStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title UpgradeabilityOwnerStorage\n * @dev This contract keeps track of the upgradeability owner\n */\ncontract UpgradeabilityOwnerStorage {\n  // Owner of the contract\n    address private _upgradeabilityOwner;\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function upgradeabilityOwner() public view returns (address) {\n        return _upgradeabilityOwner;\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\n        _upgradeabilityOwner = newUpgradeabilityOwner;\n    }\n\n}\n\n// File: contracts/UpgradeabilityStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title UpgradeabilityStorage\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\n */\ncontract UpgradeabilityStorage {\n  // Version name of the current implementation\n    string internal _version;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the version name of the current implementation\n    * @return string representing the name of the current version\n    */\n    function version() public view returns (string) {\n        return _version;\n    }\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\n// File: contracts/OwnedUpgradeabilityStorage.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n\n/**\n * @title OwnedUpgradeabilityStorage\n * @dev This is the storage necessary to perform upgradeable contracts.\n * This means, required state variables for upgradeability purpose and eternal storage per se.\n */\ncontract OwnedUpgradeabilityStorage is UpgradeabilityOwnerStorage, UpgradeabilityStorage, EternalStorage {}\n\n// File: contracts/SafeMath.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/multisender/Ownable.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n/**\n * @title Ownable\n * @dev This contract has an owner address providing basic authorization control\n */\ncontract Ownable is EternalStorage {\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner());\n        _;\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function owner() public view returns (address) {\n        return addressStorage[keccak256("owner")];\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner the address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        setOwner(newOwner);\n    }\n\n    /**\n    * @dev Sets a new owner address\n    */\n    function setOwner(address newOwner) internal {\n        emit OwnershipTransferred(owner(), newOwner);\n        addressStorage[keccak256("owner")] = newOwner;\n    }\n}\n\n// File: contracts/multisender/Claimable.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is EternalStorage, Ownable {\n    function pendingOwner() public view returns (address) {\n        return addressStorage[keccak256("pendingOwner")];\n    }\n\n    /**\n    * @dev Modifier throws if called by any account other than the pendingOwner.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner());\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to set the pendingOwner address.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        addressStorage[keccak256("pendingOwner")] = newOwner;\n    }\n\n    /**\n    * @dev Allows the pendingOwner address to finalize the transfer.\n    */\n    function claimOwnership() public onlyPendingOwner {\n        emit OwnershipTransferred(owner(), pendingOwner());\n        addressStorage[keccak256("owner")] = addressStorage[keccak256("pendingOwner")];\n        addressStorage[keccak256("pendingOwner")] = address(0);\n    }\n}\n\n// File: contracts/multisender/UpgradebleStormSender.sol\n\n// Roman Storm Multi Sender\n// To Use this Dapp: https://rstormsf.github.io/multisender\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract UpgradebleStormSender is OwnedUpgradeabilityStorage, Claimable {\n    using SafeMath for uint256;\n\n    event ClaimedTokens(address token, address owner, uint256 balance);\n    event CoinToolVIP(address customer, uint256 tier);\n\n\n    function() public payable {}\n\t\n    constructor(address _owner) public {\n\t\tsetOwner(_owner);\n        setVipPrice(0, /*--PRICE1--*/ ether); // 1 eth\n        setVipPrice(1, /*--PRICE2--*/ ether); // 2 eth\n        setVipPrice(2, /*--PRICE3--*/ ether); // 6 eth\n\t}\n\n\n\n\n    function setAddressToVip(address _address, uint256 _tier) onlyOwner public\n    {\n        setUnlimAccess(_address, _tier);\n        emit CoinToolVIP(msg.sender, _tier);\n    }\n\t\n    function registerVIP(uint256 _tier) external payable {\n        require(\n            msg.value >= uintStorage[keccak256(abi.encodePacked("vip", _tier))]\n        );\n\t\trequire(owner().send(msg.value));\n        setUnlimAccess(msg.sender, _tier);\n        emit CoinToolVIP(msg.sender, _tier);\n    }\n\t\n    function vipfee(uint256 _tier) public view returns (uint256) {\n        return uintStorage[keccak256(abi.encodePacked("vip", _tier))];\n    }\n\t\n    function setVipPrice(uint256 _tier, uint256 _price) public onlyOwner {\n        uintStorage[keccak256(abi.encodePacked("vip", _tier))] = _price;\n    }\n\t\n    function getAllVipPrices()\n        external\n        view\n        returns (uint256 tier0, uint256 tier1, uint256 tier2)\n    {\n        return (\n            uintStorage[keccak256(abi.encodePacked("vip", uint256(0)))],\n            uintStorage[keccak256(abi.encodePacked("vip", uint256(1)))],\n            uintStorage[keccak256(abi.encodePacked("vip", uint256(2)))]\n        );\n    }\n    \n    \n    /*\n        * Check isVIP\n    */\n    function isVIP(address _addr) public view returns(bool) {\n\t\tif (getUnlimAccess(_addr) >= block.timestamp || getUnlimAccess(_addr) == 9999999999999999) {\n            return true;\n        }else{\n\t\t\treturn false;\n\t\t}\n    }\n\t\n    function setUnlimAccess(address customer, uint256 _tier) private {\n        uintStorage[keccak256(\n            abi.encodePacked("unlimAccess", customer)\n        )] = getDeadline(_tier);\n    }\n\t\n    function getDeadline(uint256 _tier) public view returns (uint256) {\n        // 1 day\n        if (_tier == 0) {\n            return block.timestamp + 1 days;\n        }\n        // 7 days\n        if (_tier == 1) {\n            return block.timestamp + 7 days;\n        }\n        // 永久\n        if (_tier == 2) {\n            return 9999999999999999;\n        }\n        return 0;\n    }\n\t\n    function getUnlimAccess(address customer) public view returns (uint256) {\n        return\n            uintStorage[keccak256(abi.encodePacked("unlimAccess", customer))];\n    }\n\t\n\t\n\n    function claimTokens(address _token) public onlyOwner {\n        if (_token == 0x0) {\n            owner().transfer(address(this).balance);\n            return;\n        }\n        ERC20 erc20token = ERC20(_token);\n        uint256 balance = erc20token.balanceOf(this);\n        erc20token.transfer(owner(), balance);\n        emit ClaimedTokens(_token, owner(), balance);\n    }\n   \n\n}',w=t("a835"),v="demo",g={name:v,inject:[],components:{},data:function(){return{}},computed:Object(s["a"])({},Object(d["b"])(["isConnect","account","chainId","isPc","language","ckbNetwork","ckbAccount"])),created:function(){this.$i18n.getLocaleMessage("en")[v]||(this.$i18n.mergeLocaleMessage("en",u.en),this.$i18n.mergeLocaleMessage("zh",u.zh))},mounted:function(){return Object(i["a"])(Object(o["a"])().mark((function n(){return Object(o["a"])().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.abrupt("return");case 1:case"end":return n.stop()}}),n)})))()},methods:{createLock:function(){var n=this;return Object(i["a"])(Object(o["a"])().mark((function e(){var t,r;return Object(o["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=p,t=t.replace("/*--PRICE--*/",.008),e.next=4,n.localCompiler(t,"TokenLocker","0.6.12+commit.27d51765");case 4:r=e.sent,n.c(r);case 6:case"end":return e.stop()}}),e)})))()},createBulkSender:function(){var n=this;return Object(i["a"])(Object(o["a"])().mark((function e(){var t,r;return Object(o["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return console.log("createBulkSender"),e.prev=1,t=h,t=t.replace("/*--PRICE--*/",.003),console.log("3"),e.next=7,n.localCompiler(t,"UpgradebleStormSender","0.4.23+commit.124ca40d");case 7:r=e.sent,console.log("??"),console.log(r,"obj"),n.c(r),e.next=16;break;case 13:e.prev=13,e.t0=e["catch"](1),console.log(e.t0,"e");case 16:case"end":return e.stop()}}),e,null,[[1,13]])})))()},createBulkSenderNft:function(){var n=this;return Object(i["a"])(Object(o["a"])().mark((function e(){var t,r;return Object(o["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=f,t=t.replace("/*--PRICE--*/",.008),e.next=4,n.localCompiler(t,"CointoolMultisender","0.8.17+commit.8df45f5f");case 4:r=e.sent,n.c(r);case 6:case"end":return e.stop()}}),e)})))()},createAddPool:function(){var n=this;return Object(i["a"])(Object(o["a"])().mark((function e(){var t,r;return Object(o["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=m,e.next=3,n.localCompiler(t,"AddPool","0.6.12+commit.27d51765");case 3:r=e.sent,n.c(r);case 5:case"end":return e.stop()}}),e)})))()},createVip:function(){var n=this;return Object(i["a"])(Object(o["a"])().mark((function e(){var t,r;return Object(o["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=b,t=t.replace("/*--PRICE1--*/",.1),t=t.replace("/*--PRICE2--*/",.3),t=t.replace("/*--PRICE3--*/",1),e.next=6,n.localCompiler(t,"UpgradebleStormSender","0.4.23+commit.124ca40d");case 6:r=e.sent,n.c(r);case 8:case"end":return e.stop()}}),e)})))()},localCompiler:function(n,e,t){return Object(i["a"])(Object(o["a"])().mark((function r(){var a,i;return Object(o["a"])().wrap((function(r){while(1)switch(r.prev=r.next){case 0:return r.prev=0,a=[],a.optimizer={enabled:!0,runs:200},r.next=5,Object(l["b"])({version:"https://binaries.soliditylang.org/wasm/soljson-v".concat(t,".js"),contractBody:n,options:a});case 5:return i=r.sent,console.log(i,"Compiler"),r.abrupt("return",{abi:i.contracts.Compiled_Contracts[e].abi,bin:"0x"+i.contracts.Compiled_Contracts[e].evm.bytecode.object});case 10:throw r.prev=10,r.t0=r["catch"](0),console.log("e1",r.t0),new Error(r.t0.toString());case 14:case"end":return r.stop()}}),r,null,[[0,10]])})))()},c:function(n){return Object(i["a"])(Object(o["a"])().mark((function e(){var t,r,a,i,s;return Object(o["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return t=new c["ethers"].providers.Web3Provider(w["a"].getProvider()),r=t.getSigner(),a=new c["ethers"].ContractFactory(n.abi,n.bin,r),e.next=5,a.deploy();case 5:return i=e.sent,e.next=8,i.deployTransaction.wait();case 8:s=e.sent,console.log(s.contractAddress,"大哥 这是合约地址");case 10:case"end":return e.stop()}}),e)})))()}}},k=g,y=(t("87f8"),t("2877")),R=Object(y["a"])(k,r,a,!1,null,"3f454af6",null);e["default"]=R.exports},"87f8":function(n,e,t){"use strict";t("8eb9")},"8eb9":function(n,e,t){},a7f0:function(n,e,t){"use strict";t.d(e,"b",(function(){return u})),t.d(e,"a",(function(){return c}));var r=t("c7eb"),a=t("1da1"),o=t("5530");t("c73d"),t("b64b"),t("e9c4"),t("d3b7"),t("3ca3"),t("ddb0"),t("2b3d"),t("9861"),t("88a7"),t("271a"),t("5494");function i(){var n=self;n.addEventListener("message",(function(e){var t=e.data;if("fetch-compiler-versions"===t){if(!n.Module)try{importScripts("https://cdn.jsdelivr.net/gh/Rojeenyus/buildspace@master/soljson-v0.8.17+commit.8df45f5f.js")}catch(i){importScripts("https://binaries.soliditylang.org/wasm/soljson-v0.8.17+commit.8df45f5f.js")}}else{if(!n.Module)try{importScripts(t.version)}catch(i){importScripts("https://binaries.soliditylang.org/wasm/soljson-v0.8.17+commit.8df45f5f.js")}var r=n.Module;if("_solidity_compile"in r){var a=r.cwrap("solidity_compile","string",["string","number"]),o=JSON.parse(a(t.input));postMessage(o)}}}))}window!==self&&i();var s=function(n,e){var t={language:"Solidity",sources:{Compiled_Contracts:{content:n}},settings:Object(o["a"])(Object(o["a"])({},e),{},{outputSelection:{"*":{"*":["*"]}}})};return JSON.stringify(t)},d=new Worker(URL.createObjectURL(new Blob(["(".concat(i,")()")],{type:"module"}))),u=function(){var n=Object(a["a"])(Object(r["a"])().mark((function n(e){var t,a,o,i;return Object(r["a"])().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return t=e.version,a=e.contractBody,o=e.options,i=s(a,o),n.abrupt("return",new Promise((function(n,e){d.postMessage({input:i,version:t}),d.onmessage=function(e){var t=e.data;n(t)},d.onerror=e})));case 3:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),c=function(){var n=Object(a["a"])(Object(r["a"])().mark((function n(){return Object(r["a"])().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.abrupt("return",new Promise((function(n,e){d.postMessage("fetch-compiler-versions"),d.onmessage=function(e){var t=e.data;n(t)},d.onerror=e})));case 1:case"end":return n.stop()}}),n)})));return function(){return n.apply(this,arguments)}}()},ebe1:function(n,e,t){"use strict";t.d(e,"a",(function(){return s})),t.d(e,"b",(function(){return p}));var r=t("c7eb"),a=t("1da1"),o=(t("d81d"),t("a15b"),t("ab3e")),i=t("e6ce"),s=(t("a835"),{btc:"bitcoin",ape:"apecoin",kroma:"ethereum",btc_fractal:"fractal-bitcoin",merlin:"bitcoin",bevm:"bitcoin",satoshivm:"bitcoin",bitlayer:"bitcoin",b2:"bitcoin",eth:"ethereum",blast:"ethereum",taiko:"ethereum",mode:"ethereum","zksync-era":"ethereum","zksync-lite":"ethereum",trx:"tron",sol:"solana",sei:"sei-network",sui:"sui",arb:"ethereum",doge:"dogecoin",bsc:"binancecoin",opbnb:"binancecoin",xterio:"binancecoin",bnb:"binancecoin",combo:"binancecoin",ht:"huobi-token",kcc:"kucoin-shares",heco:"huobi-token",matic:"matic-network",pol:"matic-network",polygon:"matic-network",ftm:"fantom",xdai:"xdai",okt:"oec-token",xlayer:"okb",avax:"avalanche-2",celo:"celo",movr:"moonriver",cro:"crypto-com-chain",iotx:"iotex",bch:"bitcoin-cash",sbch:"bitcoin-cash",glmr:"moonbeam",xdc:"xdce-crowd-sale",sdn:"shiden",fuse:"fuse-network-token",aac:"acute-angle-cloud",klay:"klay-token",one:"harmony",op:"ethereum",evmos:"evmos",brise:"bitrise-token",dogechain:"dogecoin",syscoin:"syscoin",canto:"canto",ethw:"ethereum-pow-iou",ethf:"ethereumfair",aptos:"aptos",onus:"onus",core:"coredaoorg",cfx:"conflux-token",fil:"filecoin",arbnova:"ethereum","polygon-zkevm":"ethereum",pls:"pulsechain",base:"ethereum",linea:"ethereum",shibarium:"bone-shibaswap",scroll:"ethereum",telos:"telos",humanode:"humanode",ace:"fusionist",wemix:"wemix-token",zkfair:"usd-coin",mantle:"mantle",btt:"bittorrent",manta:"ethereum",starknet:"ethereum",eos:"eos",nuls:"nuls",metis:"metis-token",fon:"fonsmartchain",zeta:"zetachain",zeta_test:"zetachain",dym:"dymension",meld:"meld-2",meld_test:"meld-2",theta:"theta-fuel",bgb:"bitget-token",ckb:"nervos-network",zora:"ethereum",go:"gochain",flr:"flare-networks",acala:"acala",zklink:"ethereum",ronin:"ronin",zircuit:"ethereum",chz:"chiliz"});function d(){return u.apply(this,arguments)}function u(){return u=Object(a["a"])(Object(r["a"])().mark((function n(){var e,t,a,s,d,u,c,l,p,h,f,m=arguments;return Object(r["a"])().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return e=m.length>0&&void 0!==m[0]?m[0]:"eth",n.prev=1,t=-1!==e.indexOf(","),a=t?"":i["a"][e].symbol,t&&(s=e.split(","),d=s.map((function(n){return i["a"][n].symbol})),a=d.join(",")),n.next=7,Object(o["a"])({url:"https://min-api.cryptocompare.com/data/pricemulti?fsyms=".concat(a,"&tsyms=USD,CNY"),method:"get",data:{}});case 7:if(u=n.sent,!t){n.next=14;break}for(l in c=u,c){for(f in p=c[l],h={},p)h[f.toLowerCase()]=p[f];c[l]=h}return n.abrupt("return",c);case 14:return n.abrupt("return",{usd:u[a]["USD"],cny:u[a]["CNY"]});case 15:n.next=21;break;case 17:return n.prev=17,n.t0=n["catch"](1),console.log(n.t0,"eee"),n.abrupt("return",!1);case 21:case"end":return n.stop()}}),n,null,[[1,17]])}))),u.apply(this,arguments)}function c(){return l.apply(this,arguments)}function l(){return l=Object(a["a"])(Object(r["a"])().mark((function n(){var e,t=arguments;return Object(r["a"])().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return e=t.length>0&&void 0!==t[0]?t[0]:"eth",n.next=3,d(e);case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n)}))),l.apply(this,arguments)}function p(){return h.apply(this,arguments)}function h(){return h=Object(a["a"])(Object(r["a"])().mark((function n(){var e,t=arguments;return Object(r["a"])().wrap((function(n){while(1)switch(n.prev=n.next){case 0:return e=t.length>0&&void 0!==t[0]?t[0]:"eth",n.abrupt("return",c(e));case 2:case"end":return n.stop()}}),n)}))),h.apply(this,arguments)}}}]);